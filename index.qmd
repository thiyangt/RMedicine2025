---
title: "Dengue Forecasting Addressing the Interrupted Effect from COVID-19 Cases"
subtitle: ""
author:
  - name: "Thiyanga S. Talagala"
    affiliation:
      - "University of Sri Jayewardenepura, Sri Lanka"
date: "June 9, 2025"
format:
  revealjs:
    theme: 
      - default
      - slides.scss
    title-slide-attributes:
      data-background-image: "img/rmed_background.png"
      data-background-size: cover
      data-background-opacity: "50"
    fontsize: 2em
    html-math-method: mathjax
    slide-number: c/t
    show-slide-number: all
    highlight-style: rstudio_default-light.theme
    logo: "img/rmed.png"
   # footer: "[Slides are here](https://){target='_blank'}"  # complete the URL
    include-after-body: "img/clean_title_page.html"
include-in-header:
  text: |
    <link rel="shortcut icon" href="img/rmed.ico"/>
embed-resources: true
knitr:
  opts_chunk:      ########## set global options ############
    collapse: true # keep code from blocks together (if shown)
    echo: false    # don't show code
    message: true  # show messages
    warning: true  # show warnings
    error: true    # show error messages
    comment: ""    # don't show ## with printed output
    R.options:   
      digits: 3    # round to three digits
editor_options:
  chunk_output_type: console
editor: source
highlight-style: rstudio_default-light.theme
---


# **Mosquitoes** or **Snakes** â€” \newline which scares you more?
 
```{r echo=FALSE}
# Helper packages - need dplyr and ggplot
library(conflicted)
suppressPackageStartupMessages(library(tidymodels))
tidymodels_prefer()
 
suppressPackageStartupMessages(library(tidyverse))

library(knitr)
# library(kableExtra)
```

##

```{r}
knitr::include_graphics("presentationimage/stat.png")
```

## Countries with Risk of Dengue

(Based on 2019 data)

```{r, warning=FALSE, message=FALSE}
library(denguedatahub)
library(ggplot2)
library(maps)
library(magrittr)
library(viridis)

# Filter for the year 2019
worlddata2019 <- dplyr::filter(world_annual, year == 2019)

# Enhanced plot with caption
ggplot(worlddata2019, aes(x = long, y = lat, group = group, fill = factor(dengue.present))) +
  geom_polygon(color = "black") +
  coord_fixed(1.3) +  # Ensures correct aspect ratio
  scale_fill_manual(values=c( "#969696", "#fc9272"),name = "Dengue Presence", labels = c("No", "Yes")) +  # Using viridis for better color representation
  labs(
 #   title = "Global Dengue Distribution in 2019",
 #   subtitle = "Presence of Dengue Virus Reported by Country",
    x = "Longitude",
    y = "Latitude",
    caption = "Author: Thiyanga S. Talagala, Source: https://denguedatahub.netlify.app/world.html"  # Adding caption
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )

```

## Why are countries near the equator at higher risk of dengue?"

:::: {.columns}

::: {.column width="50%"}

```{r}
knitr::include_graphics("presentationimage/mosquito-life-cycle-illustration.jpg")
```



<span style="font-size: xx-small;">Image Source: [https://www.gptx.org/Departments/Public-Health-and-Environmental-Quality/Public-Health/Mosquito-Control-Fight-the-Bite/Mosquito-Facts](https://www.gptx.org/Departments/Public-Health-and-Environmental-Quality/Public-Health/Mosquito-Control-Fight-the-Bite/Mosquito-Facts)</span>


:::

::: {.column width="50%"}

**Favorable climate that speed up the mosquito life cycle**

1. Warm temperatures year-round

2. High humidity and frequent rainfall

3. No harsh winters

4. Many equatorial countries have rapidly growing urban areas with poor waste and water management.

5. People often live and work in open environments with limited protection, increasing exposure.



:::

::::

## Countries with Risk of Dengue

Sri Lanka

```{r, out.height="100%"}
# Coordinates for Sri Lanka
sri_lanka_coords <- data.frame(
  long = 80.7718,
  lat = 7.8731,
  label = "Sri Lanka"
)

ggplot(worlddata2019, aes(x = long, y = lat, group = group, fill = factor(dengue.present))) +
  geom_polygon(color = "black") +
  geom_point(data = sri_lanka_coords, aes(x = long, y = lat), inherit.aes = FALSE, color = "blue", size = 3) +
  geom_text(data = sri_lanka_coords, aes(x = long, y = lat, label = label), inherit.aes = FALSE,
            vjust = 1, size = 7, color = "blue") +
  coord_fixed(1.3) +
  scale_fill_manual(values = c("#969696", "#fc9272"), name = "Dengue Presence", labels = c("No", "Yes")) +
  labs(
    x = "Longitude",
    y = "Latitude",
    caption = "Author: Thiyanga S. Talagala, Source: https://denguedatahub.netlify.app/world.html"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text = element_text(size = 10),
    axis.title = element_text(size = 12)
  )

```

## Time Series Plot of Weekly Dengue Cases in Sri Lanka (National Level)

```{r, warning=FALSE, message=FALSE, out.width="100%", echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
library(ggplot2)
library(lubridate)
library(tsibble)
library(tidyverse)
library(lubridate)
library(plotly)
# Step 1: Aggregate weekly cases across all districts
data("srilanka_weekly_data")
srilanka_weekly_data <- srilanka_weekly_data[-which(srilanka_weekly_data$year == 2023 & srilanka_weekly_data$week == 52), ]

srilanka_weekly_data[which(srilanka_weekly_data$start.date == "12/26/2020"), ]$cases <-  c(35, 17,  18, 20, 2, 0, 3, 2, 7, 6, 1, 1, 0, 0, 208, 0, 0, 12, 8, 4, 0, 0, 0, 2, 3, 2)


country_weekly <- srilanka_weekly_data |>
  group_by(year, week, start.date) %>%
  summarise(total_cases = sum(cases, na.rm = TRUE), .groups = 'drop') |>
  arrange(start.date)

# Step 2: Plot the time series
country_weekly <- country_weekly |> 
  mutate(
         yearweek = yearweek(start.date)) |>
  distinct(yearweek, .keep_all = TRUE) 

country_weekly_tsibble <- country_weekly |>
  as_tsibble(index = yearweek)
p1 <- ggplot(country_weekly_tsibble, aes(x = yearweek, y = total_cases)) +
  geom_line() +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y") +
  labs(
   # title = "Weekly Dengue Cases in Sri Lanka",
  #  subtitle = "From National Aggregated Data",
    x = "Year",
    y = "Weekly Dengue Cases"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold")
  )
ggplotly(p1)
```

## Time Series Plot of Weekly Dengue Cases in Sri Lanka (National Level)

<span style="color: red;">Red Segment: Interrupted Period Due to the COVID-19 Pandemic</span>


```{r, warning=FALSE, message=FALSE, out.width="100%"}
library(dplyr)
library(ggplot2)
library(tsibble)

# Create highlight flag
country_weekly_tsibble <- country_weekly_tsibble %>%
  mutate(highlight = yearweek >= yearweek("2019 W47") & yearweek <= yearweek("2022 W52"))

# Plot: Two layers to avoid connecting red and grey
ggplot() +
  geom_line(data = country_weekly_tsibble ,
            aes(x = yearweek, y = total_cases),
            color = "black", linewidth = 0.8) +
  geom_line(data = country_weekly_tsibble %>% filter(highlight),
            aes(x = yearweek, y = total_cases),
            color = "red", linewidth = 0.8) +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y") +
  labs(
    x = "Year",
    y = "Weekly Dengue Cases"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold")
  )

```

# Data

## Weekly Dengue Cases Corresponds to 25 Districts in Sri Lanka 

```{r, warning=FALSE, message=FALSE}
## devtools::install_github("thiyangt/SriLanka")
library(SriLanka)
ggplot(lka_adm2) + 
  geom_sf()
```

## Data Source

```{r}
knitr::include_graphics("presentationimage/epidunit.png")
```

## `denguedatahub` R package

:::: {.columns}

::: {.column width="20%"}

```{r}
knitr::include_graphics("presentationimage/logo.png")
```

:::

::: {.column width="80%"}

On CRAN

```r
install.packages("denguedatahub")
```

You could install the development version from Github using

```r
install.packages("devtools")
devtools::install_github("thiyangt/denguedatahub")
```

:::

::::

## Web scraping using the `denguedatahub` R package

```{r}
knitr::include_graphics("presentationimage/webtotidy.png")
```

## More about denguedatahub

link: [https://denguedatahub.netlify.app/](https://denguedatahub.netlify.app/)

```{r, out.width="100%", fig.pos="center"}
knitr::include_graphics("presentationimage/hub.png")
```

# Methodology: Methods of Forecasting

## Methods of Addressing Interrupted Period

**Approach 1**

Excluding the interrupted period from model training


**Approach 2**

Forecasting the interrupted period first and then using it for modeling

**Approach 3**

Down-weighting interrupted period



> Benchmark

- Without considering the interruption effect



# Analysis

## R Pckages

```{r, warning=FALSE, message=FALSE, echo=TRUE}
# install.packages("devtools")
# devtools::install_github("thiyangt/denguedatahub")
library(denguedatahub)
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(lubridate)
library(broom)
```

## Data


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"

#data("srilanka_weekly_data")
df <- srilanka_weekly_data |>
mutate(yearweek = yearweek(start.date))
duplicaterws <- df |> 
  mutate(
         yearweek = yearweek(start.date)) |> 
  duplicates(key = district, index = yearweek)
df_tsibble <- df |>
  distinct(district, yearweek, .keep_all = TRUE) |>
  as_tsibble(index = yearweek, key = district)

```

```{r}
#| echo: true
df_tsibble |> head() 
```

```{r}
#| echo: true
df_tsibble |> tail() 
```

## Training vs Test Datasets

:::: {.columns}

::: {.column width="50%"}

Training set

```{r, echo=TRUE}
train_tsibble <- df_tsibble |> 
  filter(year(yearweek) < 2025)
train_tsibble 
```

:::

::: {.column width="50%"}
Test set

```{r, echo=TRUE}
test_tsibble  <- df_tsibble |> 
  filter(year(yearweek) == 2025)
test_tsibble
```

:::

::::


# Results

## Benchmark: Without considering the interruption effect


```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
tb_all_ARIMA <- train_tsibble |> model(arima = ARIMA(cases))
```

```{r, echo=FALSE}
tb_all_ARIMA 
```

## Approach 1: Excluding the interrupted period from model training

```{r, warning=FALSE, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
train_tsibble_excludecovid <- train_tsibble |> filter(year(yearweek) < 2025 & year(yearweek) > 2022 )
```

```{r, echo=TRUE}
train_tsibble_excludecovid |> head()
train_tsibble_excludecovid |> tail()
```

## Approach 1: Fitted models for each district

```{r, warning=FALSE, message=FALSE, echo=TRUE, cache=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
tb_all_ARIMA_excludecovid <- train_tsibble_excludecovid |> model(arima = ARIMA(cases))

```

```{r}
tb_all_ARIMA_excludecovid
```

## Approach 2: Forecasting the interrupted period first and then using it for modeling

Step 1: Forecasting interrupted period: training and test sets

```{r, echo=TRUE}
train_tsibble2 <- train_tsibble |> filter(year(yearweek) < 2020)
test_tsibble2  <- train_tsibble |> filter(year(yearweek) == 2020 | 
       year(yearweek) == 2021 | 
       year(yearweek) == 2022)
```

Step 2: Fit models

```{r, echo=TRUE, cache=TRUE}
tb_all_ARIMA2 <- train_tsibble2 |> model(arima = ARIMA(cases))
```

Step 3: Generate forecasts for interrupted period

```{r, echo=TRUE}
fc2 <-   tb_all_ARIMA2 |> 
  forecast(h=157) |>
  mutate(.mean = round(.mean, 0))
```

## Approach 2: Forecasting the interrupted period first and then using it for modeling (cont.)

Step 4: Replace interrupted period with forecasts

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
train_tsibble_updated <- train_tsibble |>
  left_join(fc2 , by = c("district", "yearweek")) |>
  mutate(
    cases = if_else(!is.na(.mean), .mean, cases.x)  # Replace only if .mean is available
  ) |>
  select(-c(.mean, cases.x, cases.y))
```

```{r, echo=TRUE}
train_tsibble_updated 
```

## Approach 2: Forecasting the interrupted period first and then using it for modeling (cont.)

Step 5: Use updated training set for forecasting

```{r, warning=FALSE, message=FALSE, echo=TRUE, cache=TRUE}
tb_all_ARIMA_updatedcovid <- train_tsibble_updated |> model(arima = ARIMA(cases))

```

```{r, echo=TRUE}
tb_all_ARIMA_updatedcovid 
```

# Forecasts

Benchmark:  Without considering the interruption effect

```{r, echo=TRUE}
fcb <-   tb_all_ARIMA |> 
  forecast(h=9) |>
  mutate(.mean = round(.mean, 0))
```

Approach 1: Excluding the interrupted period from model training

```{r, echo=TRUE}
fc_a1 <-   tb_all_ARIMA_excludecovid |> 
  forecast(h=9) |>
  mutate(.mean = round(.mean, 0))
```

Approach 2: Forecasting the interrupted period first and then using it for modeling

```{r, echo=TRUE}
fc_a2 <-   tb_all_ARIMA_updatedcovid  |> 
  forecast(h=9) |>
  mutate(.mean = round(.mean, 0))
```

## Approach 3: Down-weighting interrupted period

$$forecast_{Approach 3} = 0.7 \times forecast_{\text{excluded}} + 0.3 \times forecast_{\text{included without extimating}}$$

```{r, echo=TRUE}
fc_a3mean <- (0.3*fcb$.mean) + (0.7*fc_a1$.mean)
fc_a3 <- data.frame(district=test_tsibble$district,
                   predicted = fc_a3mean,
                   actual=test_tsibble$cases)
```



# Model Comparison


```{r, echo=TRUE}
fcb_accuracy <- fabletools::accuracy(fcb, test_tsibble)
fc_a1_accuracy <- fabletools::accuracy(fc_a1, test_tsibble)
fc_a2_accuracy <- fabletools::accuracy(fc_a2, test_tsibble)


```

Output only for `fcb_accuracy` for illustration

```{r, echo=TRUE}
fcb_accuracy
```

## RMSE from all approaches


```{r, warning=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
Benchmark <- fcb_accuracy$RMSE
Excluded <- fc_a1_accuracy$RMSE
UpdatedCovid <- fc_a2_accuracy$RMSE
rmse_by_district <- fc_a3 |>
  group_by(district) |>
  summarise(RMSE = sqrt(mean((actual - predicted)^2)), .groups = "drop")
Downweight <- rmse_by_district$RMSE
rmse_tbl <- tibble(Benchmark,Excluded, UpdatedCovid, Downweight)
```

```{r}
rmse_tbl
```

## Distribution of RMSE

```{r, warning=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
rmse_tbl_long <- rmse_tbl |> pivot_longer(everything(), names_to = "Approach",
    values_to = "RMSE")

plotrmse <- rmse_tbl_long |> ggplot(aes(x=Approach, y=RMSE, col=Approach)) + ggbeeswarm::geom_beeswarm(priority='density',size=2.5)+scale_color_brewer(palette = "Dark2")
```

```{r}
plotrmse
```

## Summary statistics of RMSE

```{r}
#| code-fold: true
#| code-summary: "Show the code"
summary_stats <- rmse_tbl_long |>
  group_by(Approach) |>
  summarise(
    mean_RMSE = mean(RMSE, na.rm = TRUE),
    median_RMSE = median(RMSE, na.rm = TRUE),
    sd_RMSE = sd(RMSE, na.rm = TRUE),
    min_RMSE = min(RMSE, na.rm = TRUE),
    max_RMSE = max(RMSE, na.rm = TRUE),
    .groups = "drop"
  )

summary_stats |> knitr::kable()

```

## MAE

```{r}
MAE_fcb <- fcb_accuracy$MAE
MAE_fc_a1 <- fc_a1_accuracy$MAE
MAE_fc_a2 <- fc_a2_accuracy$MAE
rmse_by_district <- fc_a3 |>
  group_by(district) |>
  summarise(MAE = mean(abs(actual - predicted)), .groups = "drop")
MAE_fc_a3 <- rmse_by_district$MAE
MAE_tbl <- tibble(MAE_fcb,MAE_fc_a1, MAE_fc_a2, MAE_fc_a3)
MAE_tbl_long <- MAE_tbl |> pivot_longer(everything(), names_to = "Approach",
    values_to = "MAE")
MAE_tbl_long  <- MAE_tbl_long  %>%
  mutate(Approach = case_when(
    Approach == "MAE_fc_a1" ~ "Excluded",
    Approach == "MAE_fc_a2" ~ "UpdatedCovid",
    Approach == "MAE_fc_a3" ~ "Downweight",
    Approach == "MAE_fcb"   ~ "Benchmark",
    TRUE ~ Approach
  ))
summary_stats_MAE <- MAE_tbl_long |>
  group_by(Approach) |>
  summarise(
    mean_MAE = mean(MAE, na.rm = TRUE),
    median_MAE = median(MAE, na.rm = TRUE),
    sd_MAE = sd(MAE, na.rm = TRUE),
    min_MAE = min(MAE, na.rm = TRUE),
    max_MAE = max(MAE, na.rm = TRUE),
    .groups = "drop"
  )

summary_stats_MAE |> knitr::kable()
```

## ME

```{r}
ME_fcb <- fcb_accuracy$ME
ME_fc_a1 <- fc_a1_accuracy$ME
ME_fc_a2 <- fc_a2_accuracy$ME
rmse_by_district <- fc_a3 |>
  group_by(district) |>
  summarise(ME = mean(actual - predicted), .groups = "drop")
ME_fc_a3 <- rmse_by_district$ME
ME_tbl <- tibble(ME_fcb,ME_fc_a1, ME_fc_a2, ME_fc_a3)
ME_tbl_long <- ME_tbl |> pivot_longer(everything(), names_to = "Approach",
    values_to = "ME")
ME_tbl_long  <- ME_tbl_long  %>%
  mutate(Approach = case_when(
    Approach == "ME_fc_a1" ~ "Excluded",
    Approach == "ME_fc_a2" ~ "UpdatedCovid",
    Approach == "ME_fc_a3" ~ "Downweight",
    Approach == "ME_fcb"   ~ "Benchmark",
    TRUE ~ Approach
  ))
summary_stats_ME <- ME_tbl_long |>
  group_by(Approach) |>
  summarise(
    mean_ME = mean(ME, na.rm = TRUE),
    median_ME = median(ME, na.rm = TRUE),
    sd_ME = sd(ME, na.rm = TRUE),
    min_ME = min(ME, na.rm = TRUE),
    max_ME = max(ME, na.rm = TRUE),
    .groups = "drop"
  )

summary_stats_MAE |> knitr::kable()
```

## District-wise Best Approach

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
rmse_tbl$Best <- names(rmse_tbl)[apply(rmse_tbl, MARGIN = 1, FUN = which.min)]
```

```{r}
rmse_tbl$District <- fcb_accuracy$district
rmse_tbl 
```

## Spatial Visualization of Best Approaches

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
library(sf)
rmse_tbl <- rmse_tbl |>
  mutate(join_key = substr(District, 1, 5))

lka_adm2 <- lka_adm2 |>
  mutate(join_key = substr(NAME, 1, 5))

# left join to preserve sf geometry from lka_adm2
combined_sf <- lka_adm2 %>%
  left_join(rmse_tbl, by = "join_key")
p1 <- ggplot(combined_sf ) + 
  geom_sf(aes(fill=Best)) + scale_fill_brewer(palette = "Dark2")
p1
```

# Why?

##



```{r, out.height="100%", warning=FALSE, message=FALSE}
library(cowplot)
library(magick)

#knitr::include_graphics("presentationimage/Weather.jpg")
img <- image_read("presentationimage/rainfall.png") # Replace with your image path
img_gg <- ggdraw() + draw_image(img)

# Side by side
plot_grid( p1, img_gg, nrow = 1)
```




## Example from downweight as the best approach: Colombo

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
srilanka_weekly_data  |>
  filter(district == "Colombo") |>
  mutate(
    yearweek = yearweek(start.date)) |>
  ggplot(aes(x = yearweek, y = cases)) +
  geom_line() +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y")

```

## Example from excluded as the best approach: Gampaha

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
srilanka_weekly_data  |>
  filter(district == "Gampaha") |>
  mutate(
    yearweek = yearweek(start.date)) |>
  ggplot(aes(x = yearweek, y = cases)) +
  geom_line() +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y")

```


## Example from benchmark as the best approach: NuwaraEliya

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
srilanka_weekly_data  |>
  filter(district == "NuwaraEliya") |>
  mutate(
    yearweek = yearweek(start.date)) |>
  ggplot(aes(x = yearweek, y = cases)) +
  geom_line() +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y")

```

## Example from covid19updated as the best approach: Anuradhapura

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
srilanka_weekly_data  |>
  filter(district == "Anuradhapura") |>
  mutate(
    yearweek = yearweek(start.date)) |>
  ggplot(aes(x = yearweek, y = cases)) +
  geom_line() +
  scale_x_yearweek(date_breaks = "1 year", date_labels = "%Y") 

```

## Feature-based representation

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
library(feasts)
features_df <- df_tsibble |>
   features(cases, feature_set(tags = "stl"))
```

```{r}
features_df |> as.data.frame()
```

## Feature-based exploration

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
features_df$BEST <- rmse_tbl$Best
ggplot(features_df, aes(x=trend_strength,
                        y=seasonal_strength_year,
                        col=BEST)) + geom_point(size=3) +
  scale_colour_brewer(palette = "Dark2") + theme(aspect.ratio = 1)
```

## Feature-based exploration

```{r, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
features_df$BEST <- rmse_tbl$Best
ggplot(features_df, aes(x=linearity,
                        y=curvature,
                        col=BEST)) + geom_point(size=3) +
  scale_colour_brewer(palette = "Dark2") + theme(aspect.ratio = 1)
```


## Conclusions

- No single method performs best across all districts.

- The effectiveness of each approach depends not only on the model architecture but also on the nature of interruption and historical patterns unique to each district.

- Beyond improving model performance, this can provide insight into the stability and nature of the time series signal.

## References

Hyndman, R. J., & Rostami-Tabar, B. (2025). Forecasting interrupted time series. Journal of the Operational Research Society, 76(4), 790-803.

## Thank you

Slides are available at: [https://thiyangt.github.io/RMedicine2025/#/title-slide](https://thiyangt.github.io/RMedicine2025/#/title-slide)

Link to denguedatahub: [https://denguedatahub.netlify.app/](https://denguedatahub.netlify.app/)

Contact: **ttalagala@sjp.ac.lk**